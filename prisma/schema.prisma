datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments     Comment[]
  // Optional for WebAuthn support
  
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support

model Post {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  title String
  slug String @unique
  content String @db.Text
  image String?
  view Int @default(0)
  nbComments Int @default(0)
  comments Comment[]
  // user
  userEmail String
   user User @relation(fields: [userEmail], references: [email])
  
  
  catSlug String
  cat Category @relation(fields: [catSlug], references: [slug])

 
}

model Category {
  id String @id @default(cuid())
  slug String @unique
  title String
  image String?
  posts Post[]
}

model Comment {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  content String
  userEmail String
  user User @relation(fields: [userEmail], references: [email])
  postSlug String
  post Post @relation(fields: [postSlug], references: [slug])

}